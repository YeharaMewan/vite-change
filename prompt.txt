You are a senior AI/ML engineer and a master of React, Python, and Tailwind CSS. Your task is to refactor and improve an existing HR chatbot application by applying modern best practices. The application consists of a backend (Python/FastAPI) and a frontend (React/Vite).

Your goal is to perform a full-stack refactoring to create a robust, user-friendly, and maintainable application. You will update three key backend files and two key frontend files.

### Backend Refactoring
**1. Refactor Agent Naming (`backend/app/agents.py`)**
- Go to `backend/app/agents.py`.
- For each agent defined, keep the internal Python variable name (e.g., `hr_database_agent`) but add a user-friendly `display_name` attribute.
- For example, `hr_database_agent.display_name = "HR Database Assistant"`. Do this for all six agents.
- Update the `create_hr_supervisor_system` function to use these new `display_name` attributes in the prompt, making the system's internal descriptions consistent with the user-facing names.

**2. Implement Structured Action Output (`backend/app/hr_analytics_tools.py`)**
- Go to `backend/app/hr_analytics_tools.py`.
- Add a new tool function named `generate_quarterly_report`.
- This function should simulate generating a report by returning a structured JSON object.
- The JSON object must contain the key `"action_type"` with the value `"download_report"` and a `"url"` key pointing to a dummy report file (e.g., `"/path/to/dummy/report.pdf"`).

### Frontend Refactoring
**1. Consolidate UI and Streaming Functionality (`frontend/src/components/HRChat.jsx`)**
- Your primary task is to completely refactor `HRChat.jsx` by combining its UI with the streaming logic from `StreamingHRChat.jsx`.
- **Remove the synchronous chat logic** and integrate the `useStreamingChat` hook to handle real-time responses.
- Implement a responsive sidebar that is collapsible on mobile (`lg` breakpoint) and fixed on desktop. A new hamburger menu icon (`Bars3Icon`) in the main header will toggle the sidebar's visibility on mobile.
- Use a dark theme, with `bg-gray-950` for the sidebar and `bg-gray-900` for the main chat area.
- Redesign the chat message bubbles:
    - User messages should use a vibrant gradient (`bg-gradient-to-r from-blue-600 to-purple-600`).
    - AI responses should use a subtler background (`bg-gray-800/30`).
- Update the input area to be a single, large, rounded component with a prominent send button styled with the same vibrant gradient.
- Replace the manual markdown formatting logic with the `ReactMarkdown` component to ensure proper rendering of bold, italic, and other markdown syntax.
- **Integrate the Action Message Component**: Create a new component or logic within the message rendering loop to detect the `{"action_type": "download_report", ...}` JSON payload. If detected, this logic should render a styled "Download Report" button with the provided URL.
- The AI's author name must be consistently displayed as `"HR Assistant"` instead of a dynamic or generic ID.

**2. Enhance Custom CSS (`frontend/src/index.css`)**
- Go to `frontend/src/index.css`.
- Add custom Tailwind CSS classes to support the new UI. This includes classes for custom scrollbars (`.sidebar-scrollbar`, `.chat-scrollbar`) and responsive utilities (e.g., `safe-area-padding`).

---

**Output:**

Please provide the complete, updated code for the following files:

1.  `backend/app/agents.py`
2.  `backend/app/hr_analytics_tools.py`
3.  `frontend/src/components/HRChat.jsx`
4.  `frontend/src/index.css`